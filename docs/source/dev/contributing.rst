.. _contributing:

Contributor's Guide
===================

Welcome to our open source project! If you're reading this, it's likely because you're interested in contributing, and we sincerely appreciate your support! Open source projects thrive with the valuable contributions from individuals like you, and we're grateful for your consideration.

This document provides guidelines for contributing to our project. To get started, we recommend reading this guide to familiarize yourself with our collaborative process. If you have any questions, feel free to reach out to our primary maintainer: `Colin Smith`_.

.. _Colin Smith: https://github.com/clnsmth

Be Courteous
------------

In the spirit of collaboration, we emphasize the importance of maintaining a respectful and inclusive environment.

In our project, we uphold a golden rule that applies to all forms of contribution, including bug reports and feature requests: treat everyone involved with respect. We value the diverse perspectives and experiences of our contributors and encourage constructive and courteous interactions.

See our :ref:`Code of Conduct <conduct>` for details.

.. _Code of Conduct: https://soso.readthedocs.io/en/latest/dev/conduct/

Contribution Suitability
------------------------

The final decision regarding the suitability of a contribution for the project rests with our project maintainers. While we carefully consider all contributions, there may be instances where certain contributions are not aligned with the project's current goals or needs, and as a result, they may be declined.

Need some feedback on whether your idea is suitable for the project? Open a `GitHub issue`_. We're happy to discuss your ideas and provide feedback!

.. _GitHub issue: https://github.com/clnsmth/soso/issues

Code Contributions
------------------

Steps for Submitting Code
~~~~~~~~~~~~~~~~~~~~~~~~~

Here are a sequence of steps to help with your code contribution:

1. Fork the project repository on GitHub.
2. Create a `feature branch` from the `development` branch.
3. Install the package by running ``poetry install`` at the command line.
4. Verify that all tests pass on your system by running ``pytest`` at the command line. In case of failures, conduct a thorough investigation. If you require assistance in diagnosing the issue, follow the guidelines for filing :ref:`bug-reports`.
5. Construct test cases that effectively illustrate the bug or feature.
6. Implement your changes, including any relevant documentation updates following the `NumPy`_ convention for docstrings.
7. Re-run the complete test suite to ensure the success of all tests.
8. Format and analyze your code according to our :ref:`code-format-and-analysis` guidelines.
9. Ensure the docs build following the :ref:`documentation-contributions` guidelines.
10. Check that the sdist and wheels build by running ``poetry build`` at the command line.
11. Commit your work following our :ref:`commit-message` guidelines.
12. Submit a GitHub Pull Request to the `development` branch of the upstream repository.

.. _NumPy: https://numpydoc.readthedocs.io/en/latest/format.html#style-guide
.. _pytest: https://docs.pytest.org/en/latest/
.. _Angular commit style: https://github.com/angular/angular/blob/convert/CONTRIBUTING.md#-commit-message-format

Code Review
~~~~~~~~~~~

Once contributions have undergone a code review process, they will be merged. It is generally recommended to incorporate any feedback received during the code review, unless there are strong objections. If, after submitting your objections, it is determined that the original feedback is still applicable, you will have to either implement the suggested changes or retract your contribution.

.. _code-format-and-analysis:

Code Format and Analysis
~~~~~~~~~~~~~~~~~~~~~~~~

Our project uses a couple tools to ensure the code base has a consistent
style and format as it grows. We use `Black`_ for code formatting and `Pylint`_ for static code analysis. Both can be run from the command line::

    black src/ tests/
    pylint src/ tests/

.. _Black: https://black.readthedocs.io/en/stable/
.. _Pylint: https://pylint.pycqa.org/en/latest/

.. _documentation-contributions:

Documentation Contributions
---------------------------

We greatly appreciate any efforts to enhance our documentation! The documentation files reside within the ``docs/`` directory and are written in `reStructuredText`_. We utilize `Sphinx`_ to generate a comprehensive suite of documentation. The API documentation is automatically generated by Sphinx from `NumPy`_ formatted docstrings.

Build the docs from the command line::

    make --directory=docs clean html

.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _Sphinx: http://sphinx-doc.org/index.html

.. _bug-reports:

Bug Reports
-----------

Bug reports play a crucial role in our project! However, before submitting a bug report, we kindly request you to check the existing `GitHub issues`_ to ensure that the bug hasn't been reported before.

If you are reporting a bug, please use the `Bug report`_ issue template. We appreciate it!

.. _Bug report: https://github.com/clnsmth/soso/issues/new/choose
.. _GitHub issues: https://github.com/clnsmth/soso/issues

Feature Requests
----------------

Feature requests help our project grow with the user community. If you have an idea for a new feature, we'd love to hear about it! Before submitting a feature request, we kindly request you to check the existing `GitHub issues`_ to ensure that the feature hasn't been requested.

If you are proposing a feature, please use the `Feature request`_ issue template. Thanks!

.. _Feature request: https://github.com/clnsmth/soso/issues/new/choose

.. _commit-message:

Commit Messages
---------------

Commit messages are incredibly valuable for understanding our project's code. When crafting your commit message, please provide context about the changes being made and the reasons behind the chosen implementation.

To ensure readability, we recommend to keep the commit message header under 52 characters and the body within 72 characters.