name: ci-cd

on:
  push:
    branches: [main, development]
  pull_request:
  workflow_dispatch:

jobs:

  ci:
    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
      # Set up job requirements
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Check-out repository
      uses: actions/checkout@v4
    - name: Install poetry
      uses: snok/install-poetry@v1
    - name: Install package
      run: poetry install --sync --with dev

      # Format code and error on issues. This is an easy check to pass.
    - name: Run Black formatter
      run: poetry run black src/ tests/

      # Analyze code but don't error on issues. This check encourages best
      # practices and offers flexibility in adoption.
    - name: Analyze code with pylint
      run: |
        poetry run pylint src/ --exit-zero --disable=C0103,W0621,R0904
        poetry run pylint tests/ --exit-zero --disable=C0103,W0621,R0904

    # Test
    - name: Test with pytest
      run: poetry run pytest tests/ --cov=soso --cov-report=xml
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    # Build docs
    - name: Build documentation
      run: poetry run make html --directory docs/


  cd:
    # Only run this job if the "ci" job passes
    needs: ci

    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Set up operating system
    runs-on: ubuntu-latest

    # Define job steps
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Check-out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_TOKEN }}

    - name: Install poetry
      uses: snok/install-poetry@v1

    - name: Install package
      run: poetry install

    - name: Use Python Semantic Release to prepare release
      id: release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release version
          poetry run semantic-release publish
          git checkout development
          git merge main
          git push origin development

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: steps.release.outputs.released == 'true'
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
